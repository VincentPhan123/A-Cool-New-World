import java.util.*;
public class Fraction {
	private int numer = 0;
	private int denom = 1;
	
	public Fraction(int n) {
		this.numer = n;
		this.denom = 1;
	}
	
	public Fraction(int n, int d) {
		this.numer = n;
		this.denom = d;
    }
	
    static int[] simplify(int[] arr) {
        int gcd = 0;
        int [] numbers = new int [2];
        int num = 0;
        int den = 0;
		if(arr[0] > 0){
            for(int i = 1; i <= arr[0] && i <= arr[1]; i++){
                if(arr[0] % i == 0 && arr[1] % i == 0){
                    gcd = i;
                }
            }
        }else{
            for (int i = Math.abs(arr[0]); i >= 1; i++){
                if (arr[0] % i == 0 && arr[1] % i == 0){
                    gcd = i;
                }
            }
        }

        if(gcd != 0){
            num = arr[0] / gcd;
            den = arr[1] / gcd;
            numbers[0] = num;
            numbers[1] = den;
        }
        
        return numbers;
    }
      
	static int[] addFrac(Fraction frac1, Fraction frac2) {
        int [] frac = new int [2];
        if(frac1.denom == frac2.denom) {
            int numSum = frac1.numer + frac2.numer;
            frac[0] = numSum; 
            frac[1] = frac1.denom;
        }else {
            int newDen = frac1.denom * frac2.denom;
            int num1 = frac1.numer * frac2.denom;
            int num2 = frac2.numer * frac1.denom;
            int numSum = num1 + num2;
            frac[0] = numSum;
            frac[1] = newDen;
        }
		return frac;
	}
	
	static int[] subFrac(Fraction frac1, Fraction frac2) {
        int [] frac = new int [2];
        if(frac1.denom == frac2.denom) {
            int numDiff = frac1.numer - frac2.numer;
            frac[0] = numDiff;
            frac[1] = frac2.denom;
        }else{
            int newDen = frac1.denom * frac2.denom;
            int num1 = frac1.numer * frac2.denom;
            int num2 = frac2.numer * frac1.denom;
            int numDiff = num1 - num2;
            frac[0] = numDiff;
            frac[1] = newDen;
            }
		return frac;
    }
    
    static int [] mulFrac(Fraction frac1, Fraction frac2){
        int [] frac = new int [2];
        int productNum = frac1.numer * frac2.numer;
        int productDen = frac1.denom * frac2.denom;
        frac[0] = productNum;
        frac[1] = productDen;
        return frac;
    }

    static int [] divideFrac(Fraction frac1, Fraction frac2){
        int [] frac = new int [2];
        int numQuotient = frac1.numer * frac2.denom;
        int denQuotient = frac1.denom * frac2.numer;
        frac[0] = numQuotient;
        frac[1] = denQuotient;
        return frac;
    }
}
